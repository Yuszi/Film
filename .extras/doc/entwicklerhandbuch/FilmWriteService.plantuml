@startuml Anwendungskern

interface Promise<T>

package @nestjs/common {
  class "@Injectable" as Injectable
  hide Injectable circle
}

package typeorm {
  class Repository<T>
}

package @nestjs/typeorm {
  class "@InjectRepository" as InjectRepository
  hide InjectRepository circle
}

package mail {
  class MailService
}

package film {
  package entity {
    class Film
  }

  package service #DDDDDD {
    class FilmInvalid
    class HauptdarstellerExists
    class NameExists
    class VersionInvalid
    class VersionOutdated

    class FilmWriteService << control >> <<@Injectable()>> {
      + async create(film: Film): Promise<string|FilmInvalid|HauptdarstellerExists|NameExists>
      + async update(id: string, film: Film, version: string): Promise<number|FilmInvalid|HauptdarstellerExists|NameExists|VersionInvalid|VersionOutdated>
      + async delete(id: string): Promise<boolean>
    }

    FilmWriteService o--> "1" FilmValidationService: validationService
    FilmWriteService o--> "1" FilmReadService: readService
    FilmWriteService o--> "1" Repository: @InjectRepository repo
    FilmWriteService o--> "1" MailService: mailService

    FilmWriteService .up.> Injectable
    FilmWriteService .up.> InjectRepository

    FilmWriteService .up.> Promise
    FilmWriteService ..> Film
    FilmWriteService .up.> FilmInvalid
    FilmWriteService .up.> HauptdarstellerExists
    FilmWriteService .up.> NameExists
    FilmWriteService .up.> VersionInvalid
    FilmWriteService .up.> VersionOutdated

    FilmInvalid .up[hidden].> Film
    Film .up[hidden].> Promise
    Film .up[hidden].> Injectable
    Film .up[hidden].> InjectRepository
    HauptdarstellerExists .up[hidden].> Film
    FilmValidationService .[hidden].> Repository
    FilmValidationService .[hidden].> MailService
  }
}

hide empty members

footer (c) Chiara Scheurer

@enduml